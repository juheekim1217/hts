---
import { Icon } from 'astro-icon/components';
import Button from '~/components/ui/Button.astro';
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import type { Pricing as Props } from '~/types';

const {
  title = '',
  subtitle = '',
  tagline = '',
  prices = [],
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} />

  <div class="flex justify-center">
    <div class="grid grid-cols-3 gap-4 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-3">
      {
        prices.map(
          ({
            title,
            subtitle,
            price,
            period,
            items,
            callToAction,
            hasRibbon = false,
            ribbonTitle,
            disabled = false,
          }) => (
            <div class="col-span-3 mx-auto flex w-full sm:col-span-1 md:col-span-1 lg:col-span-1 xl:col-span-1">
              <div
                class={`relative rounded-lg border px-6 py-8 shadow flex w-full max-w-sm flex-col justify-between text-center transition
            ${disabled ? 'bg-gray-100 text-gray-400 opacity-60 dark:bg-gray-800 dark:text-gray-500 cursor-not-allowed' : 'bg-white dark:bg-slate-900 text-black dark:text-white'}`}
              >
                {hasRibbon && ribbonTitle && (
                  <div class="absolute top-[-10px] right-[-10px] z-[1] w-[100px] h-[100px] overflow-hidden text-right">
                    <span class="absolute top-[19px] right-[-21px] block w-full rotate-45 bg-green-700 text-center text-[10px] font-bold uppercase leading-5 text-white shadow-md">
                      {ribbonTitle}
                    </span>
                  </div>
                )}

                <div class="px-2 py-0">
                  {title && <h3 class="text-xl font-semibold uppercase tracking-wider mb-2">{title}</h3>}
                  {subtitle && <p class="font-light sm:text-lg">{subtitle}</p>}
                  <div class="my-8">
                    <div class="flex items-center justify-center mb-1">
                      <span class="text-5xl">$</span>
                      <span class="text-6xl font-extrabold">{price}</span>
                    </div>
                    <span class="text-base lowercase">{period}</span>
                  </div>

                  {items && (
                    <ul class="my-8 md:my-10 space-y-2 text-left">
                      {items.map(
                        ({ description, icon }) =>
                          description && (
                            <li class="flex items-start space-x-3 leading-7">
                              <div class="rounded-full bg-primary mt-1">
                                <Icon name={icon ?? 'tabler:check'} class="w-5 h-5 font-bold p-1 text-white" />
                              </div>
                              <span>{description}</span>
                            </li>
                          )
                      )}
                    </ul>
                  )}
                </div>

                <div class="mt-6 flex justify-center">
                  {disabled ? (
                    <span class="px-4 py-2 bg-gray-400 text-white rounded text-sm cursor-not-allowed select-none">
                      Coming Soon
                    </span>
                  ) : typeof callToAction === 'string' ? (
                    <Fragment set:html={callToAction} />
                  ) : (
                    callToAction?.href && <Button {...(hasRibbon ? { variant: 'primary' } : {})} {...callToAction} />
                  )}
                </div>
              </div>
            </div>
          )
        )
      }
    </div>
  </div>
</WidgetWrapper>
